class RecorderProcessor extends AudioWorkletProcessor{constructor(s){super(s),this.isNeedProcess=s.processorOptions.isNeedRecorder,this.stopProcess=!0,this.LBuffer=[],this.RBuffer=[],this.port.onmessage=s=>{const e=s.data;switch(e.type){case 0:case 1:this.isNeedProcess=e.value;break;case 2:this.stopProcess=!1,this.isNeedProcess=e.value;const s=this.flatArray(this.LBuffer),t=this.flatArray(this.RBuffer);this.port.postMessage({type:3,data:this.interleaveLeftAndRight(s,t)})}}}flatArray(s){const e=s.length*s[0].length,t=new Float32Array(e);let r=0;for(let e=0;e<s.length;e++)t.set(s[e],r),r+=s[e].length;return t}interleaveLeftAndRight(s,e){const t=s.length+e.length,r=new Float32Array(t);for(let t=0;t<s.length;t++){const o=2*t;r[o]=s[t],r[o+1]=e[t]}return r}process(s){if(!this.isNeedProcess&&this.stopProcess)return!0;const e=s[0];if(e&&e[0]){const s=new Float32Array(e[0]);this.LBuffer.push(s)}if(e&&e[1]){const s=new Float32Array(e[1]);this.RBuffer.push(s)}return this.stopProcess}}registerProcessor("recorder-processor",RecorderProcessor);